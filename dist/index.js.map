{"version":3,"file":"index.js","mappings":";;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../../../Users/Nisan/scoop/persist/nodejs/bin/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../external node-commonjs \"fs\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/runtime/compat",".././src/main.js"],"sourcesContent":[null,"module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","const core = require('@actions/core');\nconst aws = require('aws-sdk');\nconst fs = require('fs');\nconst path = require('path');\nconst qr = require('qrcode');\n\nconst NODE_ENV = process.env['NODE_ENV'];\n\n// If you want to run it locally, set the environment variables like `$ export SOME_KEY=<your token>`\nconst AWS_ACCESS_KEY_ID = process.env['AWS_ACCESS_KEY_ID'];\nconst AWS_SECRET_ACCESS_KEY = process.env['AWS_SECRET_ACCESS_KEY'];\nconst AWS_BUCKET = process.env['AWS_BUCKET'];\n\nlet input;\nif (NODE_ENV != 'local') {\n  input = {\n    awsAccessKeyId: core.getInput('aws-access-key-id', { required: true }),\n    awsSecretAccessKey: core.getInput('aws-secret-access-key', { required: true }),\n    awsRegion: core.getInput('aws-region', { required: true }),\n    awsBucket: core.getInput('aws-bucket', { required: true }),\n    filePath: core.getInput('file-path', { required: true }),\n    destinationDir: core.getInput('destination-dir'),\n    bucketRoot: core.getInput('bucket-root'),\n    outputFileUrl: core.getInput('output-file-url'),\n    contentType: core.getInput('content-type'),\n    outputQrUrl: core.getInput('output-qr-url'),\n    qrWidth: core.getInput('qr-width'),\n    public: core.getInput('public'),\n    expire: core.getInput('expire'),\n    alternativeDomainPublic: core.getInput('alternative-domain-public'),\n    alternativeDomainPrivate: core.getInput('alternative-domain-private'),\n  };\n} else {\n  input = {\n    awsAccessKeyId: AWS_ACCESS_KEY_ID,\n    awsSecretAccessKey: AWS_SECRET_ACCESS_KEY,\n    awsRegion: 'ap-northeast-1',\n    awsBucket: AWS_BUCKET,\n    filePath: './README.md',\n    destinationDir: '',\n    bucketRoot: '',\n    outputFileUrl: 'true',\n    contentType: '',\n    outputQrUrl: 'true',\n    qrWidth: '120',\n    public: 'false',\n    expire: '180',\n    alternativeDomainPublic: '',\n    alternativeDomainPrivate: '',\n  };\n}\n\naws.config.update({\n  accessKeyId: input.awsAccessKeyId,\n  secretAccessKey: input.awsSecretAccessKey,\n  region: input.awsRegion,\n});\n\nconst s3 = new aws.S3({signatureVersion: 'v4'});\n\nasync function run(input) {\n\n  const expire = parseInt(input.expire);\n  if (isNaN(expire) | expire < 0 | 604800 < expire) {\n    throw new Error('\"expire\" input should be a number between 0 and 604800.');\n  }\n\n  const qrWidth = parseInt(input.qrWidth);\n  if (!qrWidth | qrWidth < 100 | 1000 < qrWidth) {\n    throw new Error('\"qr-width\" input should be a number between 100 and 1000.');\n  }\n\n  let bucketRoot = input.bucketRoot;\n  if (bucketRoot) {\n    if (bucketRoot.startsWith('/')) {\n      bucketRoot = bucketRoot.slice(1);\n    }\n    if (bucketRoot && !bucketRoot.endsWith('/')) {\n      bucketRoot = bucketRoot + '/'\n    }\n  } else {\n    bucketRoot = 'artifacts/'; // Do not use the default value of input to match the behavior with destinationDir\n  }\n\n  let destinationDir = input.destinationDir;\n  if (destinationDir) {\n    if (destinationDir.startsWith('/')) {\n      destinationDir = destinationDir.slice(1);\n    }\n    if (destinationDir && !destinationDir.endsWith('/')) {\n      destinationDir = destinationDir + '/'\n    }\n  } else {\n    destinationDir = getRandomStr(32) + '/';\n  }\n\n  const fileKey = bucketRoot + destinationDir + path.basename(input.filePath);\n\n  let acl;\n  if (input.public == 'true') {\n    acl = 'public-read';\n  } else {\n    acl = 'private';\n  }\n\n  let params = {\n    Bucket: input.awsBucket,\n    Key: fileKey,\n    ContentType: input.contentType,\n    Body: fs.createReadStream(input.filePath),\n    ACL: acl,\n  };\n  await s3.putObject(params).promise();\n\n  let fileUrl;\n  if (input.outputFileUrl == 'true' || input.outputQrUrl == 'true') {\n    if (input.public == 'true') {\n      fileUrl = `https://${input.awsBucket}.s3.${input.awsRegion}.amazonaws.com/${fileKey}`;\n      if (input.alternativeDomainPublic) {\n        fileUrl = fileUrl.replace(`${input.awsBucket}.s3.${input.awsRegion}.amazonaws.com/${bucketRoot}`, `${input.alternativeDomainPublic}/`);\n      }\n    } else {\n      params = {\n        Bucket: input.awsBucket,\n        Key: fileKey,\n        Expires: expire,\n      };\n      fileUrl = await s3.getSignedUrlPromise('getObject', params);\n      if (input.alternativeDomainPrivate) {\n        fileUrl = fileUrl.replace(`${input.awsBucket}.s3.${input.awsRegion}.amazonaws.com/${bucketRoot}`, `${input.alternativeDomainPrivate}/`);\n      }\n    }\n    if (input.outputFileUrl == 'true') {\n      core.setOutput('file-url', fileUrl);\n    }\n  }\n\n  if (input.outputQrUrl != 'true') return;\n\n  const qrKey = bucketRoot + destinationDir + 'qr.png';\n  const tmpQrFile = './s3-upload-action-qr.png';\n\n  await qr.toFile(tmpQrFile, fileUrl, { width: qrWidth })\n\n  params = {\n    Bucket: input.awsBucket,\n    Key: qrKey,\n    ContentType: 'image/png', // Required to display as an image in the browser\n    Body: fs.readFileSync(tmpQrFile),\n    ACL: 'public-read', // always public\n  };\n  await s3.putObject(params).promise();\n  fs.unlinkSync(tmpQrFile);\n\n  let qrUrl = `https://${input.awsBucket}.s3.${input.awsRegion}.amazonaws.com/${qrKey}`;\n  if (input.alternativeDomainPublic) {\n    qrUrl = qrUrl.replace(`${input.awsBucket}.s3.${input.awsRegion}.amazonaws.com/${bucketRoot}`, `${input.alternativeDomainPublic}/`);\n  }\n  core.setOutput('qr-url', qrUrl);\n}\n\nrun(input)\n  .then(result => {\n    core.setOutput('result', 'success');\n  })\n  .catch(error => {\n    core.setOutput('result', 'failure');\n    core.setFailed(error.message);\n  });\n\nfunction getRandomStr(length) {\n  const c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ0123456789';\n  let r = '';\n  for(let i = 0; i < length; i++) {\n    r += c[Math.floor(Math.random() * c.length)];\n  }\n  return r;\n}\n"],"names":[],"sourceRoot":""}